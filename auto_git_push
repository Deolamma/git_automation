#!/usr/bin/env bash
# This script automates the git add, commit, and push process
# If no arguments were passed, it automatically adds all files
#+ requests commit messages from the user for each file and pushes
# If arguments were passed, it adds the files passed as argument
#+ requests commit messages for the files passed as arg, then pushes

if [ $# -eq 0 ];
then
	# Add all files if no CLI argument is passed
	git add .
else
	# Adds only files passed as CLI argument and file EXISTS
        COUNT=1
        # check if file exists
        while [ $COUNT -le $# ];
        do
                # Here we use var. indirection to get the value stored in COUNT
                # if the file exists ADD if NOT do NOTHING
		# We do nothing because we might have other valid files
		#+ and we still want the process to continue for those files
                if [ -e "${!COUNT}" ]
                then
                        git add "${!COUNT}"
                fi
		((COUNT++))
	done
fi

# check if anything was added
ADDED_FILES=$(git diff --staged --name-only)
# checks if added files is not NULL
if [ -n "$ADDED_FILES" ];
then
	for FILE_NAME in $ADDED_FILES;
	do
		# receive commit message from user
		# commit message cannot be empty
		COMMIT_MSG=""
		TRIAL=1
		while [ $TRIAL -le 3 ];
		do
                        if [ $TRIAL == 3 ]
                        then
                                echo "\n<<<<<THIS IS THE LAST CHANCE>>>>\n"
                        fi
			#prompt user to enter commit message
			echo "Enter a commit message for ${FILE_NAME}: "
     			read -r COMMIT_MSG
			if [ -z "$COMMIT_MSG" ];
			then
				echo "Commit message cannot be empty!!!"
			else
				break
			fi
			((TRIAL++))
		done
		if [ -z "$(echo "$COMMIT_MSG" | tr -d ' ')" ]
		then
			git reset "$FILE_NAME"
		else
			git commit -m "${COMMIT_MSG}"
		fi
	done;
else
	# No files were added
	echo "No files were added"
	exit 0
fi
# push changes
git push
